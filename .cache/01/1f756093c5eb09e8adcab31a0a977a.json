{"id":"index.js","dependencies":[{"name":"/media/avinash/06D20A78D20A6BED/GSoC 19/Medical Imaging/package.json","includedInParent":true,"mtime":1552042321118}],"generated":{"js":"// import {MnistData} from './data';\n// import * as tf from '@tensorflow/tfjs';\n// async function showExamples(data) {\n//   // Create a container in the visor\n//   const surface =\n//     tfvis.visor().surface({ name: 'Input Data Examples', tab: 'Input Data'});  \n//   // Get the examples\n//   const examples = data.nextTestBatch(20);\n//   const numExamples = examples.xs.shape[0];\n//   // Create a canvas element to render each example\n//   for (let i = 0; i < numExamples; i++) {\n//     const imageTensor = tf.tidy(() => {\n//       // Reshape the image to 28x28 px\n//       return examples.xs\n//         .slice([i, 0], [1, examples.xs.shape[1]])\n//         .reshape([28, 28, 1]);\n//     });\n//     const canvas = document.createElement('canvas');\n//     canvas.width = 28;\n//     canvas.height = 28;\n//     canvas.style = 'margin: 4px;';\n//     await tf.browser.toPixels(imageTensor, canvas);\n//     surface.drawArea.appendChild(canvas);\n//     imageTensor.dispose();\n//   }\n// }\n// async function run() {  \n//   const data = new MnistData();\n//   await data.load();\n//   await showExamples(data);\n// }\n// document.addEventListener('DOMContentLoaded', run);"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":6,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":0},"source":"index.js","original":{"line":9,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":10,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":14,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":13,"column":0},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":17,"column":0}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":18,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":19,"column":0}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":20,"column":0}},{"generated":{"line":18,"column":0},"source":"index.js","original":{"line":22,"column":0}},{"generated":{"line":19,"column":0},"source":"index.js","original":{"line":23,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":24,"column":0}},{"generated":{"line":21,"column":0},"source":"index.js","original":{"line":25,"column":0}},{"generated":{"line":22,"column":0},"source":"index.js","original":{"line":26,"column":0}},{"generated":{"line":23,"column":0},"source":"index.js","original":{"line":27,"column":0}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":29,"column":0}},{"generated":{"line":25,"column":0},"source":"index.js","original":{"line":30,"column":0}},{"generated":{"line":26,"column":0},"source":"index.js","original":{"line":31,"column":0}},{"generated":{"line":27,"column":0},"source":"index.js","original":{"line":33,"column":0}},{"generated":{"line":28,"column":0},"source":"index.js","original":{"line":34,"column":0}},{"generated":{"line":29,"column":0},"source":"index.js","original":{"line":35,"column":0}},{"generated":{"line":30,"column":0},"source":"index.js","original":{"line":36,"column":0}},{"generated":{"line":31,"column":0},"source":"index.js","original":{"line":37,"column":0}},{"generated":{"line":32,"column":0},"source":"index.js","original":{"line":39,"column":0}}],"sources":{"index.js":"// import {MnistData} from './data';\n// import * as tf from '@tensorflow/tfjs';\n\n// async function showExamples(data) {\n//   // Create a container in the visor\n//   const surface =\n//     tfvis.visor().surface({ name: 'Input Data Examples', tab: 'Input Data'});  \n\n//   // Get the examples\n//   const examples = data.nextTestBatch(20);\n//   const numExamples = examples.xs.shape[0];\n  \n//   // Create a canvas element to render each example\n//   for (let i = 0; i < numExamples; i++) {\n//     const imageTensor = tf.tidy(() => {\n//       // Reshape the image to 28x28 px\n//       return examples.xs\n//         .slice([i, 0], [1, examples.xs.shape[1]])\n//         .reshape([28, 28, 1]);\n//     });\n    \n//     const canvas = document.createElement('canvas');\n//     canvas.width = 28;\n//     canvas.height = 28;\n//     canvas.style = 'margin: 4px;';\n//     await tf.browser.toPixels(imageTensor, canvas);\n//     surface.drawArea.appendChild(canvas);\n\n//     imageTensor.dispose();\n//   }\n// }\n\n// async function run() {  \n//   const data = new MnistData();\n//   await data.load();\n//   await showExamples(data);\n// }\n\n// document.addEventListener('DOMContentLoaded', run);"},"lineCount":null}},"error":null,"hash":"c488a3a9368c6fd3a324655692a6ef7f","cacheData":{"env":{}}}